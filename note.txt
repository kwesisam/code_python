#declaring a variable
    x = 8;
    print(x); #printing out the variable
    del x; #deleting the variable


#type casting
    str()
    int()
    float()

    #receiving input
    email = input("Enter your email")

#foreach loop
    import time

    start_time = time.time();
    for i in range(10):
        for j in range(10):
            print(0, end = " ")
        print()

    print(round(time.time()-start_time),2)


    num_list = [33,42,5,66,77,22,16,79,36,62,78,43,88,39,53,67,89,11]

    for x,num in enumerate(num_list):
        if num == 36:
            print('Number found at ', x)


#list
    list1 = [1,3,4,5,2]

    print(list1[0])#print individual values of a list
    print(*list1)#print all elements
    print(list1, sep= " ")#print the list seperated by space
    
    #adding item into the list
        list1.insert(len(list1),6)#to insert new element into the list
        print(list1, sep=" ")
        list1.append(7)#append 7 to the list
        print(list1, sep=" ")
        list1.extend([10,9,8])#extend the list
        print(list1, sep=" ")

    #removing item from the list
        list1.pop(4)#remove the 5th element from the list
        print(list1, sep=" ")
        del list1[2]#del the 3th element from the list
        print(list1, sep=" " )

    #iteration through a list
        for num, x in enumerate(list1):
            print(x, num + 1)
#tuple
    my_tupble = (1,3,"sam")
    print(my_tupble)#print the tuple
    print(my_tupble.count("sam"))
    print(type(my_tupble))
    print(my_tupble.index(3))     

#set
    set_a = {1,2,3,4,5}

    print(set_a)
    set_a.add(6)#to add element to set
    print(set_a)
    set_a.remove(2)
    print(set_a)

    set_b = {4,3,5,7,6}
    print(set_a.union(set_b))#union operator on the two set

#dictionaries

    simple_dict = {1:"Coffe", 2:"Tea", 3:"Juice"}
    print(simple_dict[1])
    simple_dict[3] = "Candy"#chanign the element of the dictionary
    print(simple_dict[3])
    del simple_dict[2]#delecting the element 2

    for x in simple_dict:
        print(x)
#args and kwargs

    #args is used when you don't know the number of arguments
    def sum_of (*args):
        sum = 0
        for x in args:
            sum += x
        return sum

    print(sum_of(3,4,2))


    def mul_of(**kwargs):
        mul = 1
        for v, k in kwargs.items():
            mul *= k

        return mul

    print(mul_of(coffee = 23, tea= 77))

#erros and exceptions
    def divide_by(a, b):
        try:
            return 40 / 2
        except Exception as e:
            print("You can not divide by zero", e)

    print(divide_by(40,2))

#file handling in python
    #opening a file
        file = open("text.txt", mode="r")

        data = file.readline()

        print(data)

        file.close()

        # or 

        with open("text.txt",mode="r") as a:
            read = a.readline()

            print(read)

    #creating a file

        try:
            #this will cause an error
            with open("new file.txt", mode="w") as file:
                #file.write("New file in the building")

                #thi write into the file as list
                file.writelines(["\nNew file in the buildinnng","\nHello what popping"])
        except Exception as e:
            print("ERROR", e)
    
    #reading a file
        try:
            with open("text.txt","r") as file:
                #print(file.read())#print the whole content of the file
                #print(file.read(20))#this print out the first twenty characters
                #print(file.readline())#this read only the first line 

                #this out the content as a list
                data = file.readlines()
                for x in data:
                    print(data)
        except Exception as e:
            print("ERROR: ", e)


#string reversal
    str = "goat"

    rev_str = str[::-1]
    print(rev_str)

#map and filter
    menu = ["espresson","mocha","latte","cappuccino","cortado","americano"]

    def find_coffee(coffee):
        if coffee[0] == 'c':
            return coffee
        
    map_coffee = map(find_coffee,menu)
    for i in map_coffee:
        print(i)

    filter_coffee = filter(find_coffee, menu)

    for g in filter_coffee:
        print(g)
#class and objects
class House:
    num_rooms = 5
    bathrooms = 2

    def cost_evaluation(self):
        print(self.num_rooms)
        pass

house = House()#creating an object
house.cost_evaluation()#calling a method of the class
print(house.bathrooms)
print(House.bathrooms)

class Recipe():
    def __init__(self, dish, items, time) -> None:
        self.dish = dish
        self.items = items
        self.time = time

    def content(self):
        print("The " + self.dish + " has " + str(self.items) + \
              " and takes " + str(self.time) + " min to prepare")

    pizza = Recipe("Pizza",["cheese","bread","tomato"],45)
    pasta = Recipe("Pasta",["penne","sauce"],55)
    print(pizza.items)
    print(pasta.items)
    pizza.content()

    #abstract class
    from abc import ABC, abstractmethod

    class Employee(ABC):
        @abstractmethod
        def donote(self):
            pass

    class Donation(Employee):
        def donote(self):
            a = input("How much would you like to donte: ")
            return a

    amount = []
    john = Donation()
    j = john.donote()
    amount.append(j)

    peter = Donation()
    p = peter.donote()
    amount.append(p)

    print(amount)
